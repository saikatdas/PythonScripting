Regular expressions are used to find patterns in text. That's it. The pattern might be something as simple as the word "dog" in this sentence:

Test Regex here: https://regex101.com/

Text - The quick brown fox jumps over the lazy dog.

Pattern- dog (Find dog in a sentence) 

Find all words in a sentence that contains the letter "o"

Pattern - \w*o\w*  (so \w means all letters between a-z and * means the resulting RE to match 0 or more repetitions of the preceding RE, as many repetitions as are possible. ab* will match ‘a’, ‘ab’, or ‘a’ followed by any number of ‘b’s.)

pattern: cat
string:  The cat was cut when it ran under the car.
matches:     ---

pattern: ca[rt]
string:  The cat was cut when it ran under the car.
             ---                               ----
Above will look for car and cat because rt is inside [] third bracket

Task - Jim, where Bill had had "had", had had "had had". "Had had" had been correct.
Match all had in the above paragraph
Pattern - Hh[ad]

Task - A bat, a cat, and a rat walked into a bar...
Match all the animals
Pattern - [bcr]at   or bat|cat|rat

#ESCAPE SEQUENCE
you can't match special characters
Task - You can't match [] using regex! You will regret this!
Do - Try to match third brackets i.e. []
Regex = \[\]

pattern: \\
string:  C:\Users\Tanja\Pictures\Dogs
matches:   ^     ^     ^        ^
t   t   t   t

Pattern: \\\[\\]
String: ...match this regex `\[\]` with a regex?

Pattern: \\[rtn] or \\r|\\t|\\n
String: `\r`, `\t`, and `\n` are all regex escape sequences.

Pattern: \\.
String: Hi Walmart is my grandson there his name is "\n \r \t".

Task: Match all dots
Pattern: [.] or try \.
String:War is Peace. Freedom is Slavery. Ignorance is Strength.

Character ranges work the way you might expect, given the example above.
Put the first and last letters you want to match in the square brackets, with a hyphen in between them. If you only want to match the letters a through m, for instance, you could do:
pattern: \\[a-m]
string:  `\n`, `\r`, `\t`, and `\f` are whitespace characters, `\.`, `\\` and `\[` are not.
matches:

Hexadecimal numbers can contain digits 0-9 as well as letters A-F.
When used to specify colours, "hex" codes can be as short as three characters.
Create a regex to find valid hex codes in the list below:

Pattern: [A-F0-9]{3}|[0-9]{3} or try this- [0-9A-F][0-9A-F][0-9A-F]
String :  1H8 4E2 8FF 0P1 T8B 776 42B G12

Using character ranges, create a regex that will select only the
lowercase consonants (non-vowel characters, including y)
in the sentence below:

pattern:  [b-df-hj-np-tv-z] or [^aeiou]
string:  The walls in the mall are totally, totally tall.

pattern: [^aeiou .,T]
string:  The walls in the mall are totally, totally tall.

find all the years between 1977 and 1982 (inclusive) below:
pattern: 19[78][^3-6]
string:  1975 1976 1977 1978 1979 1980 1981 1982 1983 1984

Write a regex to match all characters below that aren't a literal carat ^ character:

pattern: [^\\^] or [^^]
string:  abc1^23*()

class	characters
\d	"digits" [0-9]
\w	"word characters" [A-Za-z0-9_]
\s	"whitespace" [ \t\r\n\f]

pattern: \\[a-z] or \\\w
string:  `\n`, `\r`, `\t`, and `\f` are whitespace characters, `\.


must start with a letter a-zA-Z, a dollar sign $, or an underscore _.
The remainder of the characters must be word characters \w.

Pattern: [a-zA-Z_$]\w{2}
String: __e $12 .x2 foo Bar 3mm


United States Social Security Numbers (SSNs) are 9-digit numbers in the format XXX-XX-XXXX,
where each X can be any digit [0-9]. Using one or more character classes,
write a regex to find the properly-formatted SSNs in the list below:

pattern: \d{3}-\d{2}-\d{4}
string:  113-25=1902 182-82-0192 H23-_3-9982 1I1-O0-E38B


Match all of the English words in the passage below.
pattern: [a-z]+
string:  3 plus 3 is six but 4 plus three is 7

Select only decimal point data with KB,MB,GB,TB
Pattern: (\d+.)(\d)(KB|MB|GB|TB)
String: 11TB 13 14.4MB 22HB 9.9GB TB 0KB

Now select only int data with KB,MB,GB,TB
Pattern: (\d)(KB|MB|GB|TB)
String: 11TB 13 14.4MB 22HB 9.9GB TB 0KB

Now select decimal or int data with KB,MB,GB,TB
Pattern: (\d)(KB|MB|GB|TB)|(\d+.)(\d)(KB|MB|GB|TB) or we can simplify  (\d*.\d)(KB|MB|GB|TB)
Or (\d+\.*\d*)(KB|MB|GB|TB)  or (\d+\.*\d*)[KMGT]B or \d+\.*\d*[KMGT]B
String: 11TB 13 14.4MB 22HB 9.9GB TB 0KB

Pattern: \d+\.?\d*[KMGT]B
String: 1..3KB 5...GB ..6TB
lesson - ? matches the previous token between zero and one times,
as many times as possible, giving back as needed (greedy)


Task - In some programming languages (like Java), "long integers" and floating-point numbers
can be followed by l/L and f/F to indicate that they should be treated
as longs / floats (respectively) rather than the usual ints / doubles.
Find all of the valid longs in the line below:

Pattern: \d*\.\d+[fF]?|\d+\.\d*[fF]?|\d+[lLfF]? or ^\d*\.?[lL]|\d*\.?\d[lLfF]?
String: 42L 12 x 3.4f 6l 3.3 0F L F .2F 0.


match 0. and all
Pattern: \d*\.+\d+|[\d]\.
String: 0.011 .2 42 2.0 3.33 4.000 5 6 7.89012 0. .


pattern: ([A-Z])|([a-z])
string:  The current President of Bolivia is Evo Morales.

The above regex defines two capturing groups, which are indexed starting from 1.
The first capturing group matches any single uppercase letter, and the second capturing group matches any single lowercase letter.
 Using the "or" pipe | and the "capturing group" parentheses ()
we can define a single regular expression which matches multiple kinds of strings.


Match all l and F

Pattern:(\d+[lL])|(\d?\.?\d[fF]) <---(My approch)  | suggested answer - (\d*\.\d+[fF]|\d+\.\d*[fF]|\d+[fF])|(\d+[lL])
String: 42L 12 x 3.4f 6l 3.3 0F L F .2F 0.

Task - Add two more capturing groups to the above regex so that it also categorises numbers as double or int.

Pattern: (\d+[lL])|(\d?\.?\d[fF]?) or (\d*\.\d+[fF]|\d+\.\d*[fF]|\d+[fF])|(\d*\.\d+|\d+\.\d*)|(\d+[lL])|(\d+)
String: 42L 12 x 3.4f 6l 3.3 0F L F .2F 0.



Pattern: ([2]([1-9])|[34][0-9]|\d{3})   or 2[1-9]|[3-9]\d|\d{3}|([0-9]|1[0-9]|20)
String: 7 10 17 18 19 20 21 22 23 24 30 40 100 120
Task: Use parenthetical capturing groups (), the "or" pipe |, and character
ranges to sort the following ages into "legal to drink in the U.S." (>= 21)
and "illegal to drink in the U.S." (< 21) groups:

Task -  surnames with fewer than 4 characters and surnames with 4 or more characters
Pattern: ([A-Z][a-z]?[a-z]?)|([A-Z][a-z][a-z][a-z]+)
String:Kim Jobs Xu Cloyd Mohr Ngo Rock



pattern: ([^aeiou ]\w*)|(\w+)
string:  pds6f uub 24r2gp ewqrty l ui_op

"More specific" almost always means "longer".
Suppose we want to capture two kinds of "words": those that begin with vowels (more specific) vs.
 those that don't (any other word). How could we write a regex to capture and identify strings that match those two groups?
 (Groups below are lettered rather than numbered.



pattern: good pass - \(\S{6,12}?\)  bad pass -
string:  (12345) (my password) (Xanadu.2112) (su_do) (OfSalesmen!)


Suppose a password strength verification system on a website requires
user passwords to be between 6 and 12 non-whitespace characters.
Write a regex that flags bad passwords in the list below.
Each password is contained within parentheses () for easy regexing, so make sure your regex starts and
ends with literal ( and ) characters. (Hint: make sure you disallow literal parentheses in the passwords
with [^()] or similar, otherwise you might end up matching the entire line!)



Many regex engines provide the "word boundary" escape sequence \b. \b is a zero-width escape sequence which matches, funnily enough, the boundary of a word. Remember that when we say "word", we mean any sequence of characters in the class \w, aka. [a-zA-Z0-9_].

Matching on a word boundary means that the character immediately before or immediately after the \b sequence must be a non-word character. But we don't actually include that character in our captured string. To see how this works, let's look at a small example:
pattern: \b[^ ]+\b
string:  Ve still vant ze money, Lebowski.

By placing word boundaries "inside" the quotes ("\b...\b"), we're effectively saying that the first and last characters of the matched passwords must be "word" characters. So this works fine here, but won't work as nicely if the first or last character of a user's password is not a word character:
pattern: \"\b[^"]{0,5}\b\"|\"\b[^"]+\s[^"]*\b\"
string:  "thefollowingpasswordistooshort" "C++"

{X}   // match exactly X times
{X,}  // match >= X times
{X,Y} // match >= X and <= Y times

Pattern: \w{4}|\w{1,3}  or \w{4}|\w+
String: Kim Jobs Xu Cloyd Mohr Ngo Rock
Since the first capturing group matches all surnames with four or more characters, we could even change the second capturing group to just \w+, since this would capture
all remaining surnames (those with 1, 2, or 3 characters):


Pattern: \([^()]{0,5}\)|\([^()]+\s[^()]*\)
String : (12345) (my password) (Xanadu.2112) (su_do) (OfSalesmen!)

Task: Suppose a password strength verification system on a website requires
user passwords to be between 6 and 12 non-whitespace characters. Write
a regex that flags bad passwords in the list below. Each password is contained
within parentheses () for easy regexing, so make sure your regex starts and ends with
literal ( and ) characters. (Hint: make sure you disallow literal parentheses in the passwords with [^()] or similar,
 otherwise you might end up matching the entire line!)



Pattern: \"[\w.!]{6,12}+\" and bad pass - \"\b[^\"]{0,5}\b\"|\"\b[^\"]+\s[^"]*\b\"
String : "12345" "my password" "Xanadu.2112" "su_do" "OfSalesmen!"
Task: Highlight good password. A good password is between 6 and 12 non-whitespace characters





Task: Word boundaries are useful in syntax highlighting engines,
where we want to match on a particular sequence of characters,
but we want to ensure that they only occur at the beginning or
the end of a word (or by themselves entirely). Suppose we are
writing a syntax highlighter and we want to highlight the word var, but
only when it appears on its own (not touching any other word characters).
 Can you write a regex to do that?
